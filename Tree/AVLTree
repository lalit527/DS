class Node(object):
    def __init__(self, obj):
        self.key = obj
        self.height = 1
        self.right = None
        self.left = None

class AVLTree():
    def __init__(self):
        self.root = None
        
    def height(self, node):
        if node == None:
            return 0
        
        return node.height
    
    def max(self, a, b):
        if a > b:
            return a
        else:
            return b
     
    def getBalance(self, node):
        if node == None:
            return 0
        
        return self.height(node.left) - self.height(node.right)
    
    def rightRotate(self, node):
        #print('rR')
        x = node.left
        tmp = x.right
        
        x.right = node
        node.left = tmp
        
        node.height = 1 + max(self.height(node.left), self.height(node.right))
        x.height = 1 + max(self.height(x.left), self.height(x.right))
        
        return x
    
    def leftRotate(self, node):
        y = node.right
        tmp = y.left
        
        y.left = node
        node.right= tmp
        
        node.height = 1 + max(self.height(node.left), self.height(node.right))
        y.height = 1 + max(self.height(y.left), self.height(y.right))
        
        return y
    
    def insert(self, node, key):
        if node == None:
            return Node(key)
        
        if key > node.key:
            node.right =  self.insert(node.right, key)
        
        elif key < node.key:
            node.left = self.insert(node.left, key)
            
        else:
            return node
        
        node.height = 1 + max(self.height(node.left), self.height(node.right))
        
        balance = self.getBalance(node)
        
        if balance > 1 and key < node.left.key:
            return self.rightRotate(node)
        
        if balance < -1 and key > node.right.key:
            return self.leftRotate(node)
        
        if balance > 1 and key > node.left.key:
            node.left = self.leftRotate(node.left)
            return self.rightRotate(node)
        
        if balance < -1 and key < node.left.key:
            node.right = self.rightRotate(node.right)
            return self.leftRotate(node)
        
        
        #print (balance)
        return node

def inOrder(node):
    if node != None:
        inOrder(node.left)
        print(node.key)
        inOrder(node.right)
    
    
a = AVLTree()

a.root = a.insert(a.root, 30)
a.root = a.insert(a.root, 20)
a.root = a.insert(a.root, 10)
a.root = a.insert(a.root, 5)
a.root = a.insert(a.root, 1)
a.root = a.insert(a.root, 9)

inOrder (a.root)
