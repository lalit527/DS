2
5 12
1 4 3 7 5
10 15
1 2 3 4 5 6 7 8 9 10

i = 1
while i <= n: 
        
    # If curr_sum exceeds 
    # the sum, then remove 
    # the starting elements 
    while curr_sum > sum and start < i-1: 
        
        curr_sum = curr_sum - arr[start] 
        start += 1
            
    # If curr_sum becomes 
    # equal to sum, then 
    # return true 
    if curr_sum == sum: 
        print ("Sum found between indexes") 
        print ("%d and %d"%(start, i-1)) 
        return 1

    # Add this element  
    # to curr_sum 
    if i < n: 
        curr_sum = curr_sum + arr[i] 
    i += 1


public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap < Integer, Integer > map = new HashMap < > ();
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}

# If we reach here,  
# then no subarray 
print ("No subarray found") 
return 0